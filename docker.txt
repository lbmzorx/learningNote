安装redis 服务


虚拟机上

安装docker-compose 
https://www.jianshu.com/p/10d476c5ade1
https://blog.csdn.net/weixin_38648597/article/details/78951862


查看docker 日志 
https://blog.csdn.net/wen_1108/article/details/78356655

例：实时查看docker容器名为s12的最后10行日志

$ sudo docker logs -f -t --tail 10 s12

1 出现 

'logfile /var/log/redis_6379.log'
2018-05-30T13:41:10.260492502Z Can't open the log file: Permission denied

添加文件修改 在 目录 logs/redis/redis_6379.log

chmod 777 logs/redis/redis_6379.log

2 bind ip 问题 
bind 0.0.0.0 为所有IP 都可以访问


3 设置多个redis 服务容器

设置时候注意
yml 文件的编辑 
http://www.ruanyifeng.com/blog/2016/07/yaml.html

一定要空格对齐 


```
version: '2'
services:
    redis-db:
      build: ./redis
      ports:
        - "6379:6379"
      volumes:
        - ./redis/redis.conf:/etc/redis/redis.conf:rw
        - ../data/redis:/data:rw
        - ../logs/redis:/var/log/:rw
      restart: always
    redis02:
      image: redis:4.0
      ports:
        - "6382:6379"
      container_name: redis02
    redis03:
      image: redis:4.0
      ports:
        - "6383:6379"
      container_name: redis03
    redis04:
      image: redis:4.0
      ports:
        - "6384:6379"
      container_name: redis04

```


docker 查看所有容器ip

```
docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
```

主从配置

/var/log/redis/redis-6381.log
从服务器
配置文件修改
port 6381
slaveof  127.0.0.1 6381
pidfile /var/run/redis_6381.pid
logfile /var/log/redis/redis-6381.log


如果主 配置了 密码
则需要
配置
masterauth <master 密码>

服务文件
cp /etc/init.d/redisd /etc/init.d/redisd6381
vi /etc/init.d/redisd6381

REDISPORT=6381

查看主 的从信息

```
88server:3>info replication
"# Replication
role:master
connected_slaves:0
master_repl_offset:0
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0
"
```


配置哨兵 sentinel

```
daemonize yes
port  26379
logfile  /var/log/redis/sentinel.log
pidfile  /var/run/sentinel.pid
sentinel monitor master8000 192.168.56.101 8000 2
#5秒内master6800没有响应，就认为SDOWN
sentinel down-after-milliseconds master8000 5000  
sentinel failover-timeout  master8000 15000

链接：https://www.jianshu.com/p/c2ab606b00b7

```

sentinel announce-ip
广播地址

设置密码，如果监控redis含有密码
sentinel auth-pass mymaster sl788zdfwc8zi

解读 
sentinel monitor master001 192.168.110.101 6379 2:Sentinel去监视一个名为master001的主redis实例，这个主实例的IP地址为本机地址192.168.110.101，端口号为6379，而将这个主实例判断为失效至少需要2个 Sentinel进程的同意，只要同意Sentinel的数量不达标，自动failover就不会执行


4.sentinel down-after-milliseconds master001 30000:指定了Sentinel认为Redis实例已经失效所需的毫秒数。当实例超过该时间没有返回PING，或者直接返回错误，那么Sentinel将这个实例标记为主观下线。只有一个 Sentinel进程将实例标记为主观下线并不一定会引起实例的自动故障迁移：只有在足够数量的Sentinel都将一个实例标记为主观下线之后，实例才会被标记为客观下线，这时自动故障迁移才会执行

5.sentinel parallel-syncs master001 1：指定了在执行故障转移时，最多可以有多少个从Redis 多的情况下这个数字越小，同步的时间越长，完成故障转移所需的时间就越长

6.sentinel failover-timeout master001 180000：如果在该时间（ms）内未能完成failover操作，则认为该failover失败

7.sentinel notification-script <master-name> <script-path>：指定sentinel检测到该监控的redis实例指向的实例异常时，调用的报警脚本。该配置项可选，但是很常用


sentinel notification-script \ \ 
在故障转移期间，当一些警告级别的Sentinel事件发生（指重要事件，如主观下线，客观下线等）时，会触发对应路径的脚本，想脚本发送相应的事件参数。
例如：sentinel notification-script mymaster /var/redis/notify.sh
sentinel client-reconfig-script \ \ 
在故障转移结束后，触发应对路径的脚本，并向脚本发送故障转移结果的参数。
例如：sentinel client-reconfig-script mymaster /var/redis/reconfig.sh。


[root@testhost bin]# ./redis-cli -h 127.0.0.1 -p 26379
127.0.0.1:26379> info senticel
127.0.0.1:26379> info sentinel
# Sentinel
sentinel_masters:1
sentinel_tilt:0
sentinel_running_scripts:0
sentinel_scripts_queue_length:0
sentinel_simulate_failure_flags:0
master0:name=mymaster,status=ok,address=192.168.0.88:6379,slaves=1,sentinels=3

查看状态


注意 防火墙
vi /etc/sysconfig/iptables

-A INPUT -p tcp -m tcp --dport 6379 -j ACCEPT
-A INPUT -p tcp -m tcp --dport 6380 -j ACCEPT
-A INPUT -p tcp -m tcp --dport 6381 -j ACCEPT
-A INPUT -p tcp -m tcp --dport 26379 -j ACCEPT
-A INPUT -p tcp -m tcp --dport 26380 -j ACCEPT
-A INPUT -p tcp -m tcp --dport 26381 -j ACCEPT

service iptables restart



安装 rudy
# yum install ruby

# yum install rubygems

版本问题
https://www.cnblogs.com/carryping/p/7447823.html
https://www.cnblogs.com/PatrickLiu/p/8454579.html

源代码 安装 
先装 gcc





安装rudy
https://www.cnblogs.com/ligao/p/8664290.html

安装成功 



redis 的高可用 方案








